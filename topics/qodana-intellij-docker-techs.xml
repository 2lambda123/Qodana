<topic xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/stardust/topic.v2.xsd"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="qodana-intellij-docker-techs"
       title="Docker image configuration">
    <chapter id="Docker+image+paths" title="Docker image paths">
        <table>
            <tr>
                <td>Path</td>
                <td>Description</td>
            </tr>
            <tr>
                <td>
                    <code>/data/project</code>
                </td>
                <td>Root directory of the project to be analyzed</td>
            </tr>
            <tr>
                <td>
                    <code>/data/results</code>
                </td>
                <td>Directory to store the analysis results, needs to be empty before running Qodana IntelliJ</td>
            </tr>
            <tr>
                <td>
                    <code>/root/.config/idea</code>
                </td>
                <td>IntelliJ IDEA configuration directory</td>
            </tr>
            <tr>
                <td>
                    <code>/opt/idea</code>
                </td>
                <td>Directory of the IntelliJ IDEA distributive</td>
            </tr>
            <tr>
                <td>
                    <code>/data/profile.xml</code>
                </td>
                <td>Used if a profile wasn't configured by run options or via <code>qodana.yaml</code>. See <a
                        href="#Order+of+resolving+a+profile">Order of resolving a profile</a>.
                </td>
            </tr>
        </table>
    </chapter>
    <chapter id="Configuration+options" title="Configuration options">

        <note>
            <p>
                <include src="lib-qd.xml" include-id="generic-docker-image-note"/>
            </p>
        </note>

        <p>The following arguments are available for the <code>jetbrains/qodana-&lt;linter&gt;</code> command.
        </p>
        <table column-width="fixed">
            <tr>
                <td width="20">Option</td>
                <td>Description</td>
            </tr>
            <tr>
                <td><code>-i</code>,
                    <code>--project-dir=</code>
                </td>
                <td>Project root folder (default: current working directory <code>/data/project</code>)
                </td>
            </tr>
            <tr>
                <td><code>-o</code>,
                    <code>--results-dir=</code>
                </td>
                <td>Save results to folder (default: <code>/data/results</code>)
                </td>
            </tr>
            <tr>
                <td><code>-r</code>,
                    <code>--report-dir=</code>
                </td>
                <td>Save HTML report to folder (default: <code>/data/results/report</code>)
                </td>
            </tr>
            <tr>
                <td>
                    <code>--cache-dir=</code>
                </td>
                <td>Set cache folder (default: <code>/data/cache</code>)
                </td>
            </tr>
            <tr>
                <td><code>-s</code>,
                    <code>--save-report</code>
                </td>
                <td>Generate HTML report</td>
            </tr>
            <tr>
                <td><code>-w</code>,
                    <code>--show-report</code>
                </td>
                <td>Serve HTML report on port 8080</td>
            </tr>
            <tr>
                <td><code>-b</code>,
                    <code>--baseline</code>
                </td>
                <td>Run <a href="#Run+in+baseline+mode">in baseline mode</a>. Provide the path to an exisitng SARIF
                    report to be used in the baseline state calculation.
                </td>
            </tr>
            <tr>
                <td>
                    <code>--baseline-include-absent</code>
                </td>
                <td>Include in the output report the results from the baseline run that are absent in the current run
                </td>
            </tr>
            <tr>
                <td>
                    <code>--fail-threshold</code>
                </td>
                <td>Set the number of problems that will serve as a quality gate. If this number is reached, the
                    inspection run is terminated.
                </td>
            </tr>
            <tr>
                <td>
                    <code>-d</code>
                </td>
                <td>Directory to be inspected. If not specified, the whole project is inspected by default</td>
            </tr>
            <tr>
                <td><code>-n</code>,
                    <code>--profile-name</code>
                </td>
                <td>Name of a profile defined the in project. Note that the name of the profile does not necessarily
                    match the name of the containing file stored in <code>.idea/inspectionProfiles</code>. The actual
                    name is stored as the <code>&lt;option name="myName" value="%profileName%" /&gt;</code> value in the profile <code>xml</code> file and is visible in the IDE UI. For details on
                    working with inspection profiles in the IDE, see the <a
                            href="https://www.jetbrains.com/help/idea/customizing-profiles.html">IntelliJ IDEA
                        documentation</a>.
                </td>
            </tr>
            <tr>
                <td><code>-p</code>,
                    <code>--profile-path</code>
                </td>
                <td>Absolute path to the profile file</td>
            </tr>
            <tr>
                <td>
                    <code>-changes</code>
                </td>
                <td>Inspect uncommitted changes and report new problems</td>
            </tr>
        </table>
    </chapter>
    <chapter id="qodana-execution-tuneup" title="Examples of execution tuneup">
        <chapter id="Override+the+default+inspection+profile" title="Override the default inspection profile">
            <code style="block" lang="shell"><![CDATA[ docker run ... -v &lt;inspection-profile.xml&gt;:/data/profile.xml &lt;image-name&gt;
]]></code>
            <p>If no profile is specified, the default <code>qodana.recommended</code> profile is used. For more options
                of how to specify a profile, see <a href="#Order+of+resolving+a+profile">Order of resolving a
                    profile</a>.
                For more about available profiles, see <a href="qodana-yaml.md#Set+up+a+profile">Set up a profile</a>.
            </p>
        </chapter>
        <chapter id="Save+a+report+as+HTML" title="Save a report as HTML">
            <code style="block" lang="shell"><![CDATA[ docker run ... &lt;image-name&gt; --save-report
]]></code>
            <p>By default, the HTML report is stored in a separate <code>report/</code> subdirectory under the <code>
                results
            </code> directory. This location could be configured with <code>--report-dir</code>.
            </p>
        </chapter>
        <chapter id="Display+a+report+in+HTML" title="Display a report in HTML">
            <code style="block" lang="shell"><![CDATA[docker run ... -p 8080:8080 &lt;image-name&gt; --show-report
]]></code>
            <p>After the inspection is finished, the container will not exit and will listen on port <code>8080</code>.
                You can connect to <code>http://localhost:8080</code> to see the results. To stop the web server, press <code>
                    Ctrl-C
                </code> in the Docker console.
            </p>
        </chapter>
        <chapter id="Change+the+Heap+size" title="Change the Heap size">
            <code style="block" lang="shell"><![CDATA[docker run ... -e _JAVA_OPTIONS=-Xmx6g &lt;image-name&gt;
]]></code>
            <p>By default, Heap size is set to 80% of the host RAM.</p>
        </chapter>
        <chapter id="Log+INFO+messages+to+STDOUT" title="Log INFO messages to STDOUT">
            <code style="block" lang="shell"><![CDATA[docker run ... -e IDE_PROPERTIES_PROPERTY='-Didea.log.config.file=info.xml' &lt;image-name&gt;
]]></code>
            <p>The default log level for STDOUT is <code>WARN</code>.
            </p>
        </chapter>
        <chapter id="Provide+different+Gradle+settings" title="Provide different Gradle settings">
            <code style="block" lang="shell"><![CDATA[ docker run ... -v &lt;source-directory&gt;/gradle.properties:/root/.gradle/gradle.properties &lt;image-name&gt;
]]></code>
        </chapter>
        <chapter id="Use+a+different+idea-properties-file"
                 title="Use a different &apos;idea.properties&apos; file">
            <code style="block" lang="shell"><![CDATA[ docker run ... -e IDEA_PROPERTIES=/data/project/idea.properties &lt;image-name&gt;
]]></code>
        </chapter>
        <chapter id="Turn+off+user+statistics" title="Turn off user statistics">
            <p>To disable the <a href="qodana-intellij-docker-readme.md#Usage+statistics">reporting of usage
                statistics</a>, adjust the <code>idea.headless.enable.statistics</code> value:
            </p>
            <code style="block" lang="shell"><![CDATA[docker run ... -e IDE_PROPERTIES_PROPERTY=&quot;-Didea.headless.enable.statistics=false&quot; &lt;image-name&gt;
]]></code>
        </chapter>
        <chapter id="Manage+plugins" title="Manage plugins">
            <p>The Qodana IntelliJ image contains selected IDEA Ultimate plugins + a PHP plugin.</p>
            <p>Paid plugins are not yet supported. Each vendor must clarify licensing terms for CI usage and collaborate
                with us to make it work.
            </p>
            <p>You can add any free IntellJ platform plugins or your custom plugin by using the following command:</p>
            <code style="block" lang="shell"><![CDATA[docker run ... -v /your/custom/path/%pluginName%:/opt/idea/plugins/%pluginName% &lt;image-name&gt;
]]></code>
            <p>To optimize the most common cases, some bundled plugins are disabled by default. You can check the whole
                list of disabled plugins in <code>/root/.config/idea/disabled_plugins.txt</code>.
            </p>
            <p>Java, Kotlin for Server Side, PHP, and their libraries'/frameworks' plugins are enabled by default.
                Gradle and Maven plugins are also enabled.
            </p>
            <p>To change the plugins list, do any of the following:</p>
            <list>
                <li>
                    <p>Override <code>disabled_plugins.txt</code> by mounting your own file:
                    </p>
                    <code style="block" lang="shell"><![CDATA[      docker run ... -v $empty_file$:/root/.config/idea/disabled_plugins.txt &lt;image-name&gt;
]]></code>
                </li>
                <li>
                    <p>Use IDE properties <code>idea.required.plugins.id</code> and <code>
                        idea.suppressed.plugins.id</code>:
                    </p>
                    <code style="block" lang="shell"><![CDATA[  docker run ... -e IDE_PROPERTIES_PROPERTY='-Didea.required.plugins.id=JavaScript,org.intellij.grails' &lt;image-name&gt;
]]></code>
                    <p>or</p>
                    <code style="block" lang="shell"><![CDATA[    docker run ... -e IDE_PROPERTIES_PROPERTY='-Didea.suppressed.plugins.id=com.intellij.spring.security' &lt;image-name&gt;
]]></code>
                </li>
            </list>
        </chapter>
        <chapter id="Analyze+changes" title="Analyze changes">
            <p>Qodana IntelliJ lets you check only changed files:</p>
            <code style="block" lang="shell"><![CDATA[docker run  -e IDE_PROPERTIES_PROPERTY='-Didea.required.plugins.id=Git4Idea,Subversion,hg4idea' &lt;image-name&gt; -changes
]]></code>
            <p>You can adjust the <code>idea.required.plugins.id</code> value and keep only the VCS plugin suitable for
                your project.
            </p>
        </chapter>
        <chapter id="Run+in+baseline+mode" title="Run in baseline mode">
            <note>
                <p>Displaying Qodana IntelliJ baseline run results via <a href="ui-overview.md">Qodana UI</a> is
                    currently in development.
                </p>
            </note>
            <p>In baseline run mode, each new Qodana IntelliJ run is compared to some initial run selected as a &amp;quot;baseline&amp;quot;.
                This can help in situations when you have no possibility to fix old problems and rather want to prevent
                the appearance of new ones.
            </p>
            <code style="block" lang="shell"><![CDATA[   docker run ... &lt;image-name&gt; --baseline &lt;baseline-path&gt; [--baseline-include-absent]
]]></code>
            <p>where <code>&amp;lt;baseline-path&amp;gt;</code> is the path to a <code>qodana.sarif.json</code> file
                from an earlier run. If the <code>--baseline-include-absent</code> option is provided, the inspection
                results will include <i>absent</i> problems, that is the problems detected only in the baseline run but
                not in the current run.
            </p>
            <p>After the inspection is finished, Qodana IntelliJ displays the summary of the current project state
                compared to the baseline.
            </p>
            <code style="block" lang="shell"><![CDATA[Baseline comparison result - UNCHANGED: 10, NEW: 5, ABSENT: 3
]]></code>
            <p>where the detected problems are aggregated as follows:</p>
            <list>
                <li><code>new</code>: The problem was detected only in the current run but not in the baseline run.
                </li>
                <li><code>absent</code>: The problem was detected only in the baseline run but not in the current run.
                </li>
                <li><code>unchanged</code>: The problem was detected both in the current run and in the baseline run.
                </li>
            </list>
            <p>The <a href="qodana-intellij-docker-sarif.md">SARIF output report</a> will contain the per-problem
                information on the baseline state.
            </p>
        </chapter>
        <chapter id="Set+a+quality+gate" title="Set a quality gate">
            <p>Qodana IntelliJ lets you configure a &amp;quot;quality gate&amp;quot;, that is, the number of problems
                that will act as a threshold. If the threshold number is reached, the inspection run is terminated.
            </p>
            <code style="block" lang="shell"><![CDATA[   docker run ... &lt;image-name&gt; --fail-threshold &lt;number&gt;
]]></code>
            <p>When running in <a href="#Run+in+baseline+mode">baseline mode</a>, a threshold is calculated as the sum
                of <i>new</i> and <i>absent</i> problems. <i>Unchanged</i> results are ignored.
            </p>
            <note>
                <p>You can also specify the threshold by adding the <code>failThreshold: &amp;lt;number&amp;gt;</code> node
                    to <a href="qodana-yaml.md">qodana.yaml</a>. The value specified as the <code>docker run</code> option
                    will override the one specified in <code>qodana.yaml</code>.
                </p>
            </note>
        </chapter>
        <chapter id="Run+as+non-root" title="Run as non-root">
            <p>By default, the container is run as the <code>root</code> user so that Qodana IntelliJ can read any
                volumes bind-mounted with the project and write the results. As a result, files in the <code>results/
                </code> folder are owned by the <code>root</code> after the run.
                <br/>
                To avoid this, you can run the container as a regular user:
            </p>
            <code style="block" lang="shell"><![CDATA[docker run -u $UID ...
# or
docker run -u $(id -u):$(id -g) ...
]]></code>
            <p>Note that in this case the <code>results/</code> folder on host should already be created and owned by
                you. Otherwise, Docker will create it as <code>root</code> and Qodana IntelliJ will not be able to write
                to it.
            </p>
        </chapter>
        <chapter id="Cache+dependencies" title="Cache dependencies">
            <p>You can decrease the time for a Qodana IntelliJ run by persisting cache from one run to another. For
                example, package and dependency management tools such as Maven, Gradle, npm, and Yarn keep a local cache
                of downloaded dependencies.
            </p>
            <p>By default, Qodana IntelliJ would save caches to folder <code>/data/cache</code> inside container. This
                location could be changed via <code>--cache-dir</code> cli argument. The data inside is per-repository,
                so you can pass cache from <code>branch-a</code> to build checking <code>branch-b</code>. In this case,
                only new dependencies would be downloaded, if they were added.
            </p>
            <p>Example for <b>local</b> run:
            </p>
            <code style="block" lang="shell"><![CDATA[docker run --rm -it -p 8080:8080 \
   -v &lt;source-directory&gt;/:/data/project/ \
   -v &lt;output-directory&gt;/:/data/results/ \
   -v &lt;cache-directory&gt;/:/data/cache/ \
   jetbrains/qodana --show-report
]]></code>
            <p>In this case mapping the same <code>&amp;lt;cache-directory&amp;gt;</code> would speed up the second run.
            </p>
            <p>In <b>GitHub</b> workflow you can utilise <a
                    href="https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows">
                actions/cache</a>, see <a href="qodana-intellij-docker-readme.md#Run+analysis+in+CI">full example</a>.
            </p>
            <p>
                <b>GitLab</b>
                CI also has <a href="https://docs.gitlab.com/ee/ci/caching/">cache</a> which can be stored <a
                    href="https://docs.gitlab.com/ee/ci/yaml/README.html#cachepaths">only inside
            </a> the project directory. In this case, we recommend excluding the cache folder from inspection via <a
                    href="qodana-yaml.md#exclude-paths">qodana.yaml</a>.
            </p>
        </chapter>
    </chapter>
    <chapter id="Order+of+resolving+a+profile" title="Order of resolving a profile">
        <p>Qodana IntelliJ checks the configuration parameters for resolving the inspection profile in this order:</p>
        <list type="decimal">
            <li>Profile with the name <code>%name%</code> from the command-line option <code>--profile-name
                %name%</code>.
            </li>
            <li>Profile by the path <code>%path%</code> from the command-line option <code>--profile-path %path%</code>.
            </li>
            <li>Profile with the name <code>%name%</code> from <code>qodana.yaml</code>.
            </li>
            <li>Profile by the path <code>%path%</code> from <code>qodana.yaml</code>.
            </li>
            <li>Profile mounted to <code>/data/profile.xml</code>.
            </li>
            <li>Fall back to using the default <code>qodana.recommended</code> profile.
            </li>
        </list>
    </chapter>
</topic>