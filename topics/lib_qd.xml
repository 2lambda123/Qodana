<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/stardust/html-entities.dtd">
<!--suppress TopicContentShortcutHardcodedInspections -->
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/stardust/topic.v2.xsd"
       id="lib_qd" title="Library of includes"
       is-library="true">

    <chunk id="eap-warning">

        %product% is currently in Early Access, which means it may be not reliable, work not as intended, and contain errors.
        Any use of the EAP product is at your own risk.
        <include src="lib_qd.xml" include-id="contact-info"/>

    </chunk>

    <chunk id="contact-info">

        Your feedback is very welcome in
        <a href="https://youtrack.jetbrains.com/newIssue?project=QD">our issue tracker</a>
        or at <a href="mailto:qodana-support@jetbrains.com">
        qodana-support@jetbrains.com</a>.

    </chunk>

    <chunk id="license-info">

        By using %product%, you agree to the <a href="https://www.jetbrains.com/legal/agreements/user_eap.html">JetBrains EAP
        user
        agreement
    </a> and <a href="https://www.jetbrains.com/company/privacy.html">JetBrains privacy
        policy</a>.

    </chunk>

    <chunk id="docker-ram-note">
        Running analysis locally is a resource-intensive operation. If you experience issues, consider increasing the Docker
        Desktop runtime memory limit, which by default is set to 2 GB. See the Docker Desktop documentation for <a
            href="https://docs.docker.com/desktop/windows/#resources">Windows
    </a> and <a href="https://docs.docker.com/desktop/mac/#resources">Mac</a>.
    </chunk>


    <chunk id="supported-techs">
        The current version of %product% (%product-version%) lets you analyze
        <a href="linters.md">Java, Kotlin, PHP, Python, JavaScript, and TypeScript</a> projects.
        Eventually, all languages and technologies covered by JetBrains IDEs will be added.
    </chunk>

    <chunk id="qodana-playground-tip">
        <var name="linter" value="Qodana"/>
        <var name="qodana-playground-url" value="https://qodana.teamcity.com/overview?mode=builds"/>
        <a href="%qodana-playground-url%">Qodana Playground</a>
        provides several example projects analyzed by %linter%.
    </chunk>

    <chunk id="ui-note">
        The Qodana UI can be part of the CI user interface in case your CI supports the UI extension. If it doesn't, you can
        spin the Qodana UI on your own following the <a href="html-report.md">guidelines</a>.
    </chunk>

    <chunk id="show-report-command-explanation">
        This command will run the analysis on your source code and start the web server to provide a convenient view of the
        results. Open <code>http://localhost:8080</code> in your browser to examine the found problems and performed checks.
        Here you can also reconfigure the analysis. See the
        <a href="ui-overview.md"/>
        for details. When done, you can stop the web server by pressing <shortcut>Ctrl-C</shortcut> in the Docker console.
    </chunk>

    <chunk id="jvm-project-setup-note">
        To be able to run the analysis, make sure the project can be successfully built and run in the desired environment,
        that is, a JRE is properly configured, project dependencies are installed, build scripts or startup tasks are
        executed, and so on.
    </chunk>

    <chunk id="docker-options-tip">
        Consider using a <a href="qodana-yaml.md" anchor="Set+a+fail+threshold">fail threshold</a> to make the build fail when
        a certain number of problems is reached, and <a href="qodana-jvm-docker-techs.xml" anchor="Run+in+baseline+mode">
        baseline mode</a>, in which each new Qodana run is compared to some initial run selected as a "baseline". <a
            href="qodana-jvm-docker-techs.xml" anchor="Run+as+non-root">Running as non-root</a> is also supported.
    </chunk>

    <chunk id="linter-intro">
        It brings all the smarts from %ide%, which help you:
        <list>
            <li>detect anomalous code and probable bugs</li>
            <li>eliminate dead code</li>
            <li>highlight spelling problems</li>
            <li>improve overall code structure</li>
            <li>introduce coding best practices</li>
            <li>Upload inspection results to <a href="cloud-about.xml">Qodana Cloud</a></li>
        </list>
    </chunk>

    <chunk id="supported-docker-tags">
        Supported tags:
        <a href="https://hub.docker.com/r/jetbrains/qodana/tags?page=1&amp;ordering=last_updated&amp;name=2020.3-eap">
            <code>2020.3-eap</code></a>, <a href="https://hub.docker.com/r/jetbrains/qodana/tags?page=1&amp;ordering=last_updated&amp;name=2021.1-eap"><code>2021.1-eap</code></a>, <a href="https://hub.docker.com/r/jetbrains/qodana/tags?page=1&amp;ordering=last_updated&amp;name=latest"><code>latest</code></a> (points to <code>2021.2-eap</code>)
    </chunk>

    <chunk id="linter-docker-image-intro">
        <p>
            The Docker image for the <a href="%linter-page-url%">%linter%</a> linter is provided to support different usage
            scenarios:
        </p>
        <list>
            <li>Running the analysis on a regular basis as part of your continuous integration (<i>CI-based execution</i>)
            </li>
            <li>Single-shot analysis (for example, performed <i>locally</i>).
            </li>
        </list>
        <p>If you are familiar with
            <a href="%code-inspection-ide-help-url%">%ide% code inspections</a>
            and know what to expect from the static analysis outside the editor, you can skip the following section and
            continue from <a anchor="Using+an+existing+profile">Using an existing profile</a>.
        </p>
        <p>If you are just starting in the field, we recommend proceeding with the <a
                anchor="quick-start-recommended-profile">default setup
        </a> we provide. You will see the
            results of the most common checks performed on your code base. Later, you can <a
                    anchor="Configure+via+qodana.yaml">adjust them
            </a> to suit your needs better.
        </p>
        <p>You can run the %linter% linter using two methods.
            <a href="https://github.com/JetBrains/qodana-cli">Qodana CLI</a> is the easiest method. If necessary,
            check the <a href="https://github.com/JetBrains/qodana-cli/releases/latest">installation page</a> to install
            Qodana CLI. Alternatively, you can use the Docker commands from the <menupath>Docker image</menupath> tab.</p>
    </chunk>

    <chunk id="docker-local-analysis">
        <tabs group="docker-options">
            <tab title="Docker image" group-key="docker-image">
                <procedure>
                    <step>
                        <p>
                            Pull the image from Docker Hub (only necessary to update to the <code>latest</code> version):
                        </p>
                        <code style="block" lang="shell" prompt="$">docker pull jetbrains/%linter-shell%
                        </code>
                    </step>
                    <step>
                        <p>Run the following command:</p>
                        <code style="block" lang="shell" prompt="$">
                            docker run \
                               -p 8080:8080 \
                               -v &lt;source-directory&gt;/:/data/project/ \
                               -v &lt;output-directory&gt;/:/data/results/ \
                               -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                               jetbrains/%linter-shell% \
                               --show-report
                        </code>
                        <p>
                            where <code>source-directory</code> and <code>output-directory</code> are full local paths to,
                            respectively, the project source code directory and the analysis results directory. The
                            <code>QODANA_TOKEN</code> variable refers to the <a href="project-token.md">project token</a>
                            required by the
                            <a href="pricing.md" anchor="pricing-linters-licenses">Ultimate and Ultimate Plus</a> linters
                            that forwards %product% reports to <a href="cloud-about.xml">Qodana Cloud</a>.
                        </p>
                    </step>
                </procedure>
                <p>This command will run the analysis on your source code and start the web server to provide a convenient
                    view of the results. Open <code>http://localhost:8080</code> in your browser to examine the found
                    problems and performed checks. Here you can also reconfigure the analysis. See the
                    <a href="ui-overview.md"/>
                    for details. When done, you can stop the web server by pressing <shortcut>Ctrl-C</shortcut> in the
                    Docker console.
                </p>
                <p>If you don't need the user interface and prefer to study raw data, use the following command:</p>
                <code style="block" lang="shell" prompt="$">
                    docker run \
                       -v &lt;source-directory&gt;/:/data/project/ \
                       -v &lt;output-directory&gt;/:/data/results/ \
                       -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                       jetbrains/%linter-shell%
                </code>
                <p>The <code>output-directory</code> will contain <a href="qodana-inspection-output.md" anchor="Basic+output">all the
                    necessary results</a>. You can further tune the command as described in the <a
                        href="docker-image-configuration.xml">technical guide</a>.
                </p>
                <p>If you run the analysis several times in a row, make sure you've cleaned the results directory before
                    using it in <code>docker run</code> again.
                </p>
            </tab>
            <tab title="Qodana CLI" group-key="qodana-cli">
                <p>In the project root directory, run this command to inspect your code and overview the inspection
                    report locally:</p>
                <code filter="non-gs" style="block" lang="shell" prompt="$">
                    qodana scan \
                       -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                       -l %docker-image% \
                       --show-report
                </code>
                <p>If you don't need the user interface and prefer to study raw data, use the following command:</p>
                <code style="block" lang="shell" prompt="$">
                    qodana scan \
                       -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                       -l %docker-image% \
                       --results-dir &lt;output-directory&gt;
                </code>
                <p>The <code>output-directory</code> specifies the directory where the SARIF-formatted report will be
                    saved. The <code>QODANA_TOKEN</code> variable refers to the <a href="project-token.md">project token</a>
                    required by the
                    <a href="pricing.md" anchor="pricing-linters-licenses">Ultimate and Ultimate Plus</a> linters
                    that forwards %product% reports to <a href="cloud-about.xml">Qodana Cloud</a>.</p>
            </tab>
        </tabs>

    </chunk>

    <chunk id="docker-ci-analysis">
        <tabs group="docker-options">
            <tab title="Docker image" group-key="docker-image">
                <p>Use the following command as a task in a generic Shell executor:</p>
                <code style="block" lang="shell" prompt="$">
                    docker run \
                       -v &lt;source-directory&gt;/:/data/project/ \
                       -v &lt;output-directory&gt;/:/data/results/ \
                       -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                       jetbrains/%linter-shell%
                </code>
                <p>where <code>source-directory</code> and <code>output-directory</code> are full paths to, respectively,
                    the project source code directory and the <a href="qodana-inspection-output.md" anchor="Basic+output">analysis
                        results directory</a>. The <code>QODANA_TOKEN</code> variable refers to the <a href="project-token.md">project token</a>
                    required by the
                    <a href="pricing.md" anchor="pricing-linters-licenses">Ultimate and Ultimate Plus</a> linters
                    that forwards %product% reports to <a href="cloud-about.xml">Qodana Cloud</a>.
                </p>
                <p>Consider using the <a href="quality-gate.xml"/> feature to make the build fail when a certain number
                    of problems is reached and the <a href="baseline.xml"/> option to compare each new %linter%
                    run to some initial run selected as a <emphasis>baseline</emphasis>.
                    <a anchor="docker-config-reference-docker-environment-run-non-root" href="docker-image-configuration.xml">Running as non-root</a> is also supported.
                </p>
                <tip>
                    <p>
                        For details on available CI integrations, see <a href="ci.md"/>.
                    </p>
                </tip>
            </tab>
            <tab title="Qodana CLI" group-key="qodana-cli">
                <p>Run this command in the project root directory:</p>
                <code style="block" lang="shell" prompt="$">
                    qodana scan \
                       -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                       -l %docker-image% \
                       --results-dir &lt;output-directory&gt;
                </code>
                <p>This will save inspection results to the directory specified by <code>output-directory</code>.</p>
                <p>You can also apply the <a href="quality-gate.xml"/> feature to make the build fail when a certain number
                    of problems is reached by using the <code>--fail-threshold</code>
                    <a href="https://github.com/JetBrains/qodana-cli#options-1">option</a>.</p>
                <p>The <a href="baseline.xml"/> feature compares each new %linter% run to some initial run using
                    the <code>--baseline</code> and
                    <code>--baseline-include-absent</code> options.
                </p>
                <tip>
                    <p>
                        For details on available CI integrations, see <a href="ci.md"/>.
                    </p>
                </tip>

            </tab>
        </tabs>
    </chunk>

    <chunk id="docker-using-existing-profile">
        <p>
            This section is intended for users familiar with configuring code analysis via <a
                href="%code-inspection-profiles-ide-help-url%">%ide% inspection profiles</a>.
        </p>

        <tabs group="docker-options">
            <tab title="Docker image" group-key="docker-image">
                <p>You can pass the reference to the existing profile in <a
                        href="docker-image-configuration.xml" anchor="docker-config-reference-order-resolving-profile">multiple ways</a>. Here are some
                    examples:
                </p>
                <list>
                    <li>
                        <p>
                            Mapping the profile to <code>/data/profile.xml</code> inside the container:
                        </p>
                        <code style="block" lang="shell" prompt="$">
                            docker run \
                               -p 8080:8080 \
                               -v &lt;source-directory&gt;/:/data/project/ \
                               -v &lt;output-directory&gt;/:/data/results/ \
                               -v &lt;inspection-profile.xml&gt;:/data/profile.xml \
                               -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                               jetbrains/%linter-shell% \
                               --show-report
                        </code>
                    </li>
                    <li>
                        <p>
                            Using the name of the profile in your project <code>.idea/inspectionProfiles/</code> folder.
                        </p>
                        <code style="block" lang="shell" prompt="$">
                            docker run \
                               -p 8080:8080 \
                               -v &lt;source-directory&gt;/:/data/project/ \
                               -v &lt;output-directory&gt;/:/data/results/ \
                               -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                               jetbrains/%linter-shell% \
                               --show-report \
                               --profile-name &lt;custom-profile-name&gt;
                        </code>
                        <note>
                            <p>
                                <include src="lib_qd.xml" include-id="inspection-profile-name-note"/>
                            </p>
                        </note>
                    </li>
                </list>
            </tab>
            <tab title="Qodana CLI" group-key="qodana-cli">
                <p>You can pass the reference to the existing profile in <a
                    href="docker-image-configuration.xml" anchor="docker-config-reference-order-resolving-profile">multiple ways</a>. Here are some
                    examples, run both commands in the project root directory:</p>
                <list>
                <li>
                    <p>
                        Mapping the profile inside the container:
                    </p>
                    <code style="block" lang="shell" prompt="$">
                        qodana scan \
                           -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                           -l %docker-image% \
                           --results-dir &lt;output-directory&gt; \
                           --profile-path &lt;path-to-profile&gt; \
                           --show-report
                    </code>
                </li>
                <li>
                <p>
                    Using the name of the profile in your project <code>.idea/inspectionProfiles/</code> folder:
                </p>
                <code style="block" lang="shell" prompt="$">
                    qodana scan \
                       -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                       -l %docker-image% \
                       --results-dir &lt;output-directory&gt; \
                       --profile-name &lt;custom-profile-name&gt; \
                       --show-report
                </code>
                    <note>
                        <p>
                            <include src="lib_qd.xml" include-id="inspection-profile-name-note"/>
                        </p>
                    </note>
                </li>
                </list>
            </tab>
        </tabs>
    </chunk>

    <chunk id="docker-configure-via-qodana-yaml">
        <p>
            The <code>qodana.yaml</code> file will be automatically recognized and used for the analysis configuration,
            so that you don't need to pass any additional parameters.
        </p>
        <p>
            The references to the inspection profiles will be resolved <a
                href="docker-image-configuration.xml" anchor="docker-config-reference-order-resolving-profile">in a particular order</a>. To
            learn about the format, see <a href="qodana-yaml.md"/>.
        </p>
    </chunk>

    <chunk id="docker-plugins-management">
        <p>
            Paid plugins are not yet supported. Each vendor must clarify licensing terms for CI usage and collaborate
            with us to make it work.
        </p>
        <p>Any free IntelliJ platform plugins or your custom plugin can be added by mounting it to the container
            plugins' directory using the following command:
        </p>
        <code style="block" lang="shell" prompt="$">
            docker run \
            -v /your/custom/path/%\pluginName%:/opt/idea/plugins/%\pluginName% \
            jetbrains/%linter-shell%
        </code>
        <p>
            Refer to the <a href="docker-image-configuration.xml">technical guide</a> for more details.
        </p>
    </chunk>

    <chunk id="docker-usage-statistics">
        According to the <a href="https://www.jetbrains.com/legal/agreements/user_eap.html">JetBrains EAP user
        agreement</a>, we can use third-party services to analyze the usage of our features to further improve the
        user experience. All data will be collected <a href="https://www.jetbrains.com/company/privacy.html">
        anonymously</a>. You can disable the reporting of usage statistics by adjusting the options of the
        Docker command you use. Refer to the <a href="docker-image-configuration.xml" anchor="docker-config-reference-properties-user-statistics">technical guide</a> for
        details.
    </chunk>

    <chunk id="docker-config-image-paths">
        <table>
            <tr>
                <td>Path</td>
                <td>Description</td>
            </tr>
            <tr>
                <td>
                    <code>/data/project</code>
                </td>
                <td>Root directory of the project to be analyzed</td>
            </tr>
            <tr>
                <td>
                    <code>/data/results</code>
                </td>
                <td>Directory to store the analysis results, needs to be empty before running %linter%</td>
            </tr>
            <tr>
                <td>
                    <code>/opt/idea</code>
                </td>
                <td>%ide% distributive directory</td>
            </tr>
            <tr>
                <td>
                    <code>/root/.config/idea</code>
                </td>
                <td>%ide% configuration directory</td>
            </tr>
            <tr>
                <td>
                    <code>/data/profile.xml</code>
                </td>
                <td>Used if a profile was not previously configured either via the CLI or the <code>qodana.yaml</code>
                    file. See <a anchor="Order+of+resolving+a+profile">Order of resolving a profile</a>.
                </td>
            </tr>
        </table>
    </chunk>

    <chunk id="docker-config-options">

        <p>Docker images can be configured using several CLI options. All these options can be divided into three
            groups. </p>
        <p>The first group requires the equal sign (<code>&#61;</code>) to be placed between the option name and its
            argument like <code>--project-dir=/path/to/project</code>.</p>
        <p>The second group uses the space character (<code>&#160;</code>) to separate option names and their arguments
            like <code>−−baseline /path/to/sarif/file</code>.</p>
        <p>The third group of options does not require any arguments to be supplied with, as you can see it in case of
            the <code>--save-report</code> option.</p>

        <p>You can run the <code style="inline" lang="shell">docker run jetbrains/%linter-shell%</code> command to see
            the list of options in the CLI.</p>

        <chapter id="docker+config+options+directories" title="Directories">

            <table column-width="fixed">
                <tr>
                    <td width="20%">Option</td>
                    <td>Description</td>
                </tr>
                <tr>
                    <td><code>-i</code>,
                        <code>--project-dir=</code>
                    </td>
                    <td>Root directory of the inspected project (default: current working directory <code>/data/project</code>).
                    </td>
                </tr>
                <tr>
                    <td><code>-o</code>,
                        <code>--results-dir=</code>
                    </td>
                    <td>Directory to save %product% inspection results to (default: <code>/data/results</code>).
                    </td>
                </tr>
                <tr>
                    <td><code>-r</code>,
                        <code>--report-dir=</code>
                    </td>
                    <td>Directory to save an HTML report to (default: <code>/data/results/report</code>).
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>--cache-dir=</code>
                    </td>
                    <td>Cache directory (default: <code>/data/cache</code>).
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-d</code>,
                        <code>--source-directory</code>
                    </td>
                    <td>Directory inside the <code>project-dir</code> directory that needs to be inspected. If not
                        specified, the whole project is inspected.</td>
                </tr>
            </table>
        </chapter>

        <chapter id="docker+config+options+profile+configuration" title="Profile">

            <p>%product% profile can be configured using these CLI options. Alternatively, you can configure %product%
                using the <code>qodana.yaml</code> file as described in the <a href="qodana-yaml.md"/> section.</p>

            <table column-width="fixed">
                <tr>
                    <td width="20%">Option</td>
                    <td>Description</td>
                </tr>
                <tr>
                    <td><code>--disable-sanity</code></td>
                    <td>Skip running the inspections configured by the <code>sanity</code> profile (default: enabled).</td>
                </tr>
                <tr>
                    <td><code>-n</code>,
                        <code>--profile-name</code>
                    </td>
                    <td>Profile name defined in the project.
                        <include src="lib_qd.xml" include-id="inspection-profile-name-note"/>
                    </td>
                </tr>
                <tr>
                    <td><code>-p</code>,
                        <code>--profile-path</code>
                    </td>
                    <td>Absolute path to the profile file.</td>
                </tr>
                <tr>
                    <td><code>--run-promo</code></td>
                    <td>Set to <code>true</code> to have the application run the inspections configured by the
                        <code>promo</code> profile; set to <code>false</code> otherwise. By  default, a
                        <code>promo</code> run is enabled if the application is executed with the
                        <code>default</code> profile and is disabled otherwise.
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>--stub-profile</code>
                    </td>
                    <td>Absolute path to the fallback profile file. This option is applied in case the profile was not
                        specified using any available options.
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter id="docker+config+options+baseline" title="Baseline">

            <p>To learn more about the baseline feature, see the
                <a anchor="Run+in+baseline+mode">Run in baseline mode</a> example, or study the
                <a href="baseline.xml"/> section.</p>

            <table column-width="fixed">
                <tr>
                    <td width="20%">Option</td>
                    <td>Description</td>
                </tr>
                <tr>
                    <td><code>-b</code>,
                        <code>--baseline</code>
                    </td>
                    <td>Run Qodana <a href="baseline.xml">in the baseline mode</a>. Provide the path to an
                        existing SARIF report to be used in the baseline state calculation.
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>--baseline-include-absent</code>
                    </td>
                    <td>Include in the output report the results from the baseline run that are absent in the current run.
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter id="docker+config+options+miscellaneous" title="Miscellaneous">

            <table column-width="fixed">
                <tr>
                    <td width="20%">Option</td>
                    <td>Description</td>
                </tr>
                <tr>
                    <td><code>-s</code>,
                        <code>--save-report</code>
                    </td>
                    <td>Generate HTML report.</td>
                </tr>
                <tr>
                    <td><code>-w</code>,
                        <code>--show-report</code>
                    </td>
                    <td>Serve HTML report on port 8080.</td>
                </tr>
                <tr>
                    <td><code>--property=</code></td>
                    <td>Set a JVM property to be used while running %product% using the
                        <code>--property=property.name=value1,value2,...,valueN</code> notation. This option can be
                        repeated multiple times for setting multiple JVM properties. </td>
                </tr>
                <tr>
                    <td>
                        <code>--fail-threshold</code>
                    </td>
                    <td>Set the number of problems that will serve as a quality gate. If this number is reached, the
                        inspection run is terminated.
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-c</code>,
                        <code>--changes</code>
                    </td>
                    <td>Inspect uncommitted changes and report new problems.</td>
                </tr>
                <tr>
                    <td>
                        <code>--script</code>
                    </td>
                    <td>Override the default run scenario (default: <code style="inline">default</code>).</td>
                </tr>
            </table>
        </chapter>

        <chapter id="docker+config+options+qodana+cloud" title="Qodana Cloud">

            <table column-width="fixed">
                <tr>
                    <td width="20%">Option</td>
                    <td>Description</td>
                </tr>
                <tr>
                    <td><code>-a</code>,
                        <code>--analysis-id=</code>
                    </td>
                    <td>Unique report identifier (GUID) to be used by <a href="https://qodana.cloud">Qodana Cloud</a>.</td>
                </tr>
            </table>
        </chapter>

    </chunk>

    <chunk id="inspection-profile-name-note">
        Note that the name of the profile does not necessarily
        match the name of the containing file stored in <code>.idea/inspectionProfiles</code>. The actual
        name is stored as the <code>&lt;option name="myName" value="%\profileName%" /&gt;</code> value in the profile <code>xml</code> file and is visible in the %ide% UI. For details on
        working with inspection profiles in %ide%, see the <a
            href="%code-inspection-profiles-ide-help-url%">%ide% documentation</a>.
    </chunk>

    <chunk id="docker-config-override-profile">
        <code style="block" lang="shell" prompt="$">
            docker run ... -v &lt;inspection-profile.xml&gt;:/data/profile.xml \
            jetbrains/%linter-shell%
        </code>
        <p>If no profile is specified, the default <code>qodana.recommended</code> profile is used. For more options
            of how to specify a profile, see <a anchor="Order+of+resolving+a+profile">Order of resolving a
                profile</a>.
            For more about available profiles, see <a href="qodana-yaml.md" anchor="Set+up+a+profile">Set up a profile</a>.
        </p>
    </chunk>

    <chunk id="docker-config-save-report">
        <code style="block" lang="shell" prompt="$">
            docker run ... jetbrains/%linter-shell% --save-report
        </code>
        <p>By default, the HTML report is stored in a separate <code>report/</code> subdirectory under the <code>
            results
        </code> directory. This location could be configured with <code>--report-dir</code>.
        </p>
    </chunk>

    <chunk id="docker-config-display-report">
        <code style="block" lang="shell" prompt="$">
            docker run ... -p 8080:8080 jetbrains/%linter-shell% --show-report
        </code>
        <p>After the inspection is finished, the container will not exit and will listen on port <code>8080</code>.
            You can connect to <code>http://localhost:8080</code> to see the results. To stop the web server, press <shortcut>Ctrl-C</shortcut> in the Docker console.
        </p>
    </chunk>

    <chunk id="docker-config-change-heap-size">
        <code style="block" lang="shell" prompt="$">
            docker run ... -e _JAVA_OPTIONS=-Xmx6g jetbrains/%linter-shell%
        </code>
        <p>By default, Heap size is set to 80% of the host RAM.</p>
    </chunk>

    <chunk id="docker-config-log-info-to-stdout">
        <code style="block" lang="shell" prompt="$">
            docker run ... jetbrains/%linter-shell% \
            --property=idea.log.config.file=info.xml
        </code>
        <p>The default log level for STDOUT is <code>WARN</code>.
        </p>
    </chunk>

    <chunk id="docker-config-modify-gradle-settings">
        <code style="block" lang="shell" prompt="$">
            docker run ... -v &lt;source-directory&gt;/gradle.properties:/data/cache/gradle/gradle.properties \
            jetbrains/%linter-shell%
        </code>
    </chunk>

    <chunk id="docker-config-different-properties-file">
        <code style="block" lang="shell" prompt="$">
            docker run ... -e IDEA_PROPERTIES=/data/project/idea.properties \
            jetbrains/%linter-shell%
        </code>
    </chunk>

    <chunk id="docker-config-disable-statistics">
        <p>To disable the <a href="%docker-general-guide-page-url%" anchor="Usage+statistics">reporting of usage
            statistics</a>, adjust the <code>idea.headless.enable.statistics</code> value:
        </p>
        <code style="block" lang="shell" prompt="$">
            docker run ... jetbrains/%linter-shell% \
            --property=idea.headless.enable.statistics=false
        </code>
    </chunk>

    <chunk id="docker-config-manage-plugins">
        <p>You can add any free IntelliJ platform plugins or your custom plugin by using the following command:</p>
        <code style="block" lang="shell" prompt="$">
            docker run ... -v /your/custom/path/%\pluginName%:/opt/idea/plugins/%\pluginName% \
            jetbrains/%linter-shell%
        </code>
        <p>To optimize the most common cases, some bundled plugins are disabled by default. You can check the whole
            list of disabled plugins in <code>/root/.config/idea/disabled_plugins.txt</code>.
        </p>
        <p>
            <for filter="jvm">
                The Java, Kotlin for Server Side, their libraries'/frameworks', Gradle, and Maven
            </for>
            <for filter="jvm-android">
                The Android Support, Java, Kotlin for Server Side, their libraries'/frameworks', Gradle, and Maven
            </for>
            <for filter="jvm">
                The Java, Kotlin for Server Side, their libraries'/frameworks', Gradle, and Maven
            </for>
            <for filter="php">
                The PHP and its libraries'/frameworks'
            </for>
            <for filter="python">
                The Python and its libraries'/frameworks'
            </for>
            <for filter="js">
                The JavaScript and Typescript, and their libraries'/frameworks'
            </for>
            <for filter="go">
                The Golang and its libraries'/frameworks'
            </for>
            plugins are enabled by default.
        </p>
        <p>To change the plugin list, do any of the following:</p>
        <list>
            <li>
                <p>Override <code>disabled_plugins.txt</code> by mounting your own file:
                </p>
                <code style="block" lang="shell" prompt="$">
                    docker run ... -v $empty_file$:/root/.config/idea/disabled_plugins.txt \
                    jetbrains/%linter-shell%
                </code>
            </li>
            <li>
                <p>Use IDE properties <code>idea.required.plugins.id</code> and <code>
                    idea.suppressed.plugins.id</code>:
                </p>
                <code style="block" lang="shell" prompt="$">
                    docker run ... jetbrains/%linter-shell% \
                    --property=idea.required.plugins.id=JavaScript,org.intellij.grails \
                    --property=idea.suppressed.plugins.id=com.intellij.spring.security
                </code>
            </li>
        </list>
        <note>
            <p>
                Paid plugins are not yet supported. Each vendor must clarify licensing terms for CI usage and collaborate
                with us to make it work.
            </p>
        </note>
    </chunk>

    <chunk id="docker-config-analyze-changes">
        <p>%linter% lets you check only changed files:</p>
        <code style="block" lang="shell" prompt="$">
            docker run ... jetbrains/%linter-shell% \
            --property=idea.required.plugins.id=Git4Idea,Subversion,hg4idea \
            --changes
        </code>
        <p>You can adjust the <code>idea.required.plugins.id</code> value and keep only the VCS plugin suitable for
            your project.
        </p>
    </chunk>

    <chunk id="docker-config-baseline">

        <p>In the baseline run mode, each new %linter% run is compared to some initial run selected as a "baseline".
            This can help in situations when you have no possibility to fix old problems and rather want to prevent
            the appearance of new ones.
        </p>
        <code style="block" lang="shell" prompt="$">
            docker run ... jetbrains/%linter-shell% \
            --baseline &lt;baseline-path&gt; [--baseline-include-absent]
        </code>

        <p>where <code>&lt;baseline-path&gt;</code> is the path to a <code>qodana.sarif.json</code> file
            from an earlier run. If the <code>--baseline-include-absent</code> option is provided, the inspection
            results will include <i>absent</i> problems, that is the problems detected only in the baseline run but
            not in the current run.
        </p>
        <p>
            The <a href="qodana-sarif-output.md">SARIF output report</a> will contain the per-problem
            information on the baseline state.
        </p>
        <p>To learn more about the baseline feature, see the <a href="baseline.xml">Baseline</a> section.</p>

    </chunk>

    <chunk id="docker-config-set-quality-gate">
        <p>%linter% lets you configure a "quality gate", that is, the number of problems
            that will act as a threshold. If the threshold number is reached, the inspection run is terminated.
        </p>
        <code style="block" lang="shell" prompt="$">
            docker run ... jetbrains/%linter-shell% --fail-threshold &lt;number&gt;
        </code>
        <p>When running in <a anchor="Run+in+baseline+mode">baseline mode</a>, a threshold is calculated as the sum
            of <i>new</i> and <i>absent</i> problems. <i>Unchanged</i> results are ignored.
        </p>
        <note>
            <p>You can also specify the threshold by adding the <code>failThreshold: &lt;number&gt;</code> node
                to <a href="qodana-yaml.md">qodana.yaml</a>. The value specified as the <code>docker run</code> option
                will override the one specified in <code>qodana.yaml</code>.
            </p>
        </note>
    </chunk>

    <chunk id="docker-config-run-as-non-root">
        <p>By default, the container is run as the <code>root</code> user so that %linter% can read any
            volumes bind-mounted with the project and write the results. As a result, files in the <code>results/
            </code> folder are owned by the <code>root</code> after the run.
        </p>
        <p>To avoid this, you can run the container as a regular user:</p>
        <code style="block" lang="shell" prompt="$">
            docker run -u $(id -u):$(id -g) ...
        </code>
        <p>Note that in this case the <code>results/</code> folder on host should already be created and owned by
            you. Otherwise, Docker will create it as <code>root</code> and %linter% will not be able to write
            to it.
        </p>
    </chunk>

    <chunk id="docker-config-cache-dependencies">
        <p>You can decrease the time for a %linter% run by persisting cache from one run to another. For
            example, package and dependency management tools such as Maven, Gradle, npm, Yarn, and NuGet keep a local cache
            of downloaded dependencies.
        </p>
        <p>By default, %linter% would save caches to folder <code>/data/cache</code> inside container. This
            location could be changed via <code>--cache-dir</code> cli argument. The data inside is per-repository,
            so you can pass cache from <code>branch-a</code> to build checking <code>branch-b</code>. In this case,
            only new dependencies would be downloaded, if they were added.
        </p>
        <p>Example for <b>local</b> run:
        </p>
        <code style="block" lang="shell" prompt="$">
            docker run --rm -it -p 8080:8080 \
                -v &lt;source-directory&gt;/:/data/project/ \
                -v &lt;output-directory&gt;/:/data/results/ \
                -v &lt;cache-directory&gt;/:/data/cache/ \
                jetbrains/%linter-shell% --show-report
        </code>
        <p>In this case mapping the same <code>&lt;cache-directory&gt;</code> would speed up the second run.
        </p>
        <p>In a GitHub workflow you can utilise <a
                href="https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows">
            actions/cache</a>, see <a href="%docker-general-guide-page-url%" anchor="Run+analysis+in+CI">full example</a>.
        </p>
        <p>
            GitLab CI/CD also has <a href="https://docs.gitlab.com/ee/ci/caching/">cache</a> which can be stored <a
                href="https://docs.gitlab.com/ee/ci/yaml/README.html#cachepaths">only inside
        </a> the project directory. In this case, we recommend excluding the cache folder from inspection via <a
                href="qodana-yaml.md" anchor="include-example">qodana.yaml</a>.
        </p>
    </chunk>

    <chunk id="docker-config-script-docker">
        <code style="block" lang="shell" prompt="$">
            docker run ... jetbrains/%linter-shell% --script &lt;script-name&gt;&#58;&lt;parameters&gt;
        </code>

        <p>You can override the standard %product% run scenario by using the <code style="inline">--script</code> option.
            By default, %product% employs the <code style="inline">default</code> scenario, which is equivalent to running:</p>

        <code style="block" lang="shell" prompt="$">
            docker run ... jetbrains/%linter-shell% --script default
        </code>
    </chunk>

    <chunk id="docker-config-profile-resolving">
        <p>
            %linter% checks the configuration parameters for resolving the inspection profile in this order:
        </p>
        <list type="decimal">
            <li>
                Profile with the name <code>%\name%</code> from the command-line option <code>--profile-name
                %\name%</code>.
            </li>
            <li>
                Profile by the path <code>%\path%</code> from the command-line option <code>--profile-path %\path%</code>.
            </li>
            <li>
                Profile with the name <code>%\name%</code> from <code>qodana.yaml</code>.
            </li>
            <li>
                Profile by the path <code>%\path%</code> from <code>qodana.yaml</code>.
            </li>
            <li>
                Profile mounted to <code>/data/profile.xml</code>.
            </li>
            <li>
                Fall back to using the default <code>qodana.recommended</code> profile.
            </li>
        </list>
    </chunk>

    <chunk id="qodana-intellij-deprecation">Qodana IntelliJ %tech% will be discontinued soon. Use <a href="%tech-link%">technology-specific Qodana %techs%</a> instead.
    </chunk>

    <chunk id="javascript-note-from-supported-technologies">
        <p>If your project contains a frontend part written in Javascript or Typescript, the qualitative analysis will be
        possible only if the project's directory contains downloaded dependencies and the project is ready to be built.
        Simplifying this process and providing smooth support for at least for the projects based on
            [npm](https://www.npmjs.com) is currently in development.</p>
    </chunk>

    <!-- Chunk that instructs how to open a browser and observe inspection results. Used in the local run-related sections -->

    <chunk id="open-browser-instruction">Open <code>http://localhost:8080</code> in your browser to examine inspection results.
        Here, you can also reconfigure the analysis, see the <a href="ui-overview.md"/> section for
        details. When done, you can stop the web server by pressing Ctrl-C in the
        console.</chunk>

    <!-- \\\\\\\\\ UNIVERSAL CHUNK FOR LOCAL QODANA RUNS EXCEPT DOCKER IMAGES ////////// -->
    <!-- The jvm-only, py-only, and js-only filters are applied only for dedicated images respectively -->
    <!-- The gs-only filter is applied for the Getting started page -->
    <!-- The jvm-php filter is applied for all images apart from Python and JS linters -->
    <!-- The other filter applies to all images that use this filter -->
    <!-- The non-gs filter is applied for all images and excludes the content from the Getting Started page -->
    <!-- Paragraphs without filters are applied to all images -->

    <chunk id="qodana-cli-quickstart">
        <p filter="jvm-only"> To be able to run the analysis, make sure the project can be successfully built and run in the desired environment,
            that is, a JRE is properly configured, project dependencies are installed, build scripts or startup tasks are
            executed, and so on.</p>
        <p>Qodana provides two options for local analysis of your code.
            <a href="https://github.com/JetBrains/qodana-cli">Qodana CLI</a> is the easiest option to start.
            Alternatively, you can use the Docker command from the <menupath>Docker image</menupath> tab.</p>
        <p></p>
        <tabs>
            <tab id="qodana-cli-tab" title="Qodana CLI">
                <p filter="non-gs">Assuming that you have already
                    <a href="https://github.com/JetBrains/qodana-cli/releases/latest">installed</a> Qodana CLI on your
                    machine, you can run this command in the project root directory:</p>
                <procedure filter="gs-only">
                    <step>Install Qodana CLI on your machine using available
                        <a href="https://github.com/JetBrains/qodana-cli/releases/latest">options</a>.</step>
                    <step><p>In the project root directory, run this command:</p>
                        <code style="block" lang="shell" prompt="$">qodana init</code>
                        <p>This will create the <a href="qodana-yaml.md"><code>qodana.yaml</code></a> file containing
                            all necessary configuration options.</p>
                    </step>
                    <step><p>In the project root directory, run this command to inspect your code:</p>
                        <code style="block" lang="shell" prompt="$">
                            qodana scan \
                               -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                               --show-report
                        </code>
                        <p>Here, the <code>QODANA_TOKEN</code> variable refers to the <a href="project-token.md">project token</a>.</p>
                    </step>
                </procedure>
                <code filter="non-gs" style="block" prompt="$">
                    qodana scan \
                       -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                       -l %docker-image% \
                       --show-report
                </code>
                <p>Here, the <code>QODANA_TOKEN</code> variable refers to the <a href="project-token.md">project token</a>.</p>
            </tab>
            <tab id="docker-image-tab" title="Docker image">
                <p filter="gs-only">Start with any of the <a href="linters.md">provided linters</a>. For all linters the
                    procedure is basically the same.</p>
                <p filter="non-gs">To start, pull the image from Docker Hub (only necessary to get the latest version):</p>
                <code filter="non-gs" style="block" lang="shell" prompt="$">
                    docker pull %docker-image%
                </code>
                <p filter="non-php">Start local analysis with <code>source-directory</code>
                    pointing to the root of your project and
                    <code>QODANA_TOKEN</code> referring to the <a href="project-token.md">project token</a>:</p>
                <code filter="gs-only" style="block" lang="shell" prompt="$">
                    docker run --rm -it \
                       -v &lt;source-directory&gt;/:/data/project/ \
                       -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                       -p 8080:8080 \
                       jetbrains/qodana-&lt;linter&gt; \
                       --show-report
                </code>
                <p filter="php-only">If you use PHP Composer, Qodana will install your project dependencies
                    automatically right before the code analysis starts.</p>
                <p filter="php-only">In case you need to change the language level, add the following to
                    <code>&lt;source-directory&gt;/.idea/php.xml</code>:</p>
                <code filter="php-only" lang="xml" style="block">
                    &lt;?xml version="1.0" encoding="UTF-8"?&gt;
                    &lt;project version="4"&gt;
                        &lt;component name="PhpProjectSharedConfiguration" php_language_level="&lt;desired level&gt;" /&gt;
                    &lt;/project&gt;
                </code>
                <p filter="php-only">Run the analysis locally:</p>
                <code filter="non-gs" style="block" lang="shell" prompt="$">
                    docker run --rm -it \
                       -v &lt;source-directory&gt;/:/data/project/ \
                       -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                       -p 8080:8080 \
                       %docker-image% \
                       --show-report
                </code>
                <p filter="php-only">with <code>source-directory</code> pointing to the root of your project, and
                    <code>QODANA_TOKEN</code> referring to the <a href="project-token.md">project token</a>.</p>
                <p><include src="lib_qd.xml" include-id="open-browser-instruction"/></p>
            </tab>
        </tabs>
    </chunk>

    <chunk id="license-audit-tab">

        <p filter="license-audit">To overview License audit results, in the inspection report click the <menupath>Project audit</menupath> tab.</p>

        <p filter="ui-overview">The <menupath>Project audit</menupath> tab provides results of inspection by the
            <a href="license-audit.xml">License audit</a> feature. </p>

        <img src="license-audit-overview-tree.png" dark-src="license-audit-overview-tree_dark.png" width="706" alt="The dependency tree" border-effect="line"/>

        <p>License audit inspection results are grouped into a dependency tree.</p>

        <list type="decimal">
            <li>If applicable, you can expand a specific dependency to overview its dependency tree.</li>
            <li>Using <menupath>Only alerted</menupath>, you can switch between all project dependencies and dependencies
                which licenses are incompatible with the project license.</li>
            <li>Under <menupath>Project licenses</menupath> you can find the list of project licenses. Using
                <menupath>License rules</menupath>, you can overview the rules of license compatibility.</li>
            <li>You can download the list of dependencies in various formats.</li>
        </list>

        <!--<p>This tab contains several other tabs:</p>
        <list>
            <li><menupath>Languages</menupath> enumerates all technologies currently supported by %product%</li>
            <li><menupath>Translators</menupath> lists all technologies that were involved for inspecting the codebase</li>
            <li><menupath>Project License</menupath> contains information about the license used in the project</li>
            <li>
                <p><menupath>Third-party licenses</menupath> lists all project dependencies and the licenses they use
                    including dependencies that cannot be used under the current project license.</p>
                <img src="license-audit-tpl.png" dark-src="license-audit-tpl_dark.png" alt="The Third-party licenses tab" width="706" border-effect="line"/>
                <p>If you want to filter the list by dependencies that cannot be used under the current project license,
                    you can enable the <menupath>Only alerted</menupath> switch.</p>
                <img src="license-audit-tpl-enabled.png" dark-src="license-audit-tpl-enabled_dark.png" alt="The Only alerted switch" width="706" border-effect="line"/>
            </li>
            <li><p><menupath>License rules</menupath> contains the table of license compatibility.</p>
                <img src="license-audit-license-rules.png" dark-src="license-audit-license-rules_dark.png" alt="The License rules tab" width="706" border-effect="line"/>
                <p>The <menupath>Project license</menupath> column lists license names, while the
                    <menupath>Allowed licenses</menupath> and the <menupath>Prohibited licenses</menupath> columns list
                    the licenses that are compatible and incompatible with the license respectively. This can be
                    helpful when you need to override licenses.</p>
            </li>
        </list>-->

    </chunk>

    <chunk id="qodana-deployment-options">
        <p>%product% provides several deployment options to better fit your needs:</p>
        <list>
            <li><a href="docker-images.md">Docker images</a> let you inspect
                <a href="Quick-start.xml">local projects</a> and build %product% into your CI/CD pipelines.</li>
            <li><a href="ci.md">Integration tools</a> include applications for seamless integration with CI/CD systems
                like GitHub and TeamCity, and guides for configuring %product% Docker images for CI/CD. </li>
            <li><a href="qodana-ide-plugin.md">%product% functionality in JetBrains IDEs</a> lets you overview %product% using your IDE.</li>
            <li><a href="qodana_gradle_plugin.md"/> provides the Gradle interface for running %product% in IntelliJ IDEA.</li>
            <li><a href="service.md">Cloud service</a> is a cloud-based version of %product%. </li>
        </list>
    </chunk>

    <chunk id="docker-dotnet-specific-solution-project">

        <p>By default, %product% tries to locate and employ a single solution file, or, if no solution file is present,
        it tries to find a project file. If your project contains multiple solution files, you need to specify the exact
        file name using the <code>--property</code> option. For example, to make %product% always analyze the <code>MySolution.sln</code> solution
        file, you can use:</p>

        <code style="block" lang="shell">
            --property=qodana.net.solution=MySolution.sln
        </code>

        <p>Alternatively, you can specify the solution file name in the <a href="qodana-yaml.md"><code>qodana.yaml</code></a>
            file using the <code>solution</code> option:</p>

        <code style="block" lang="yaml">
            dotnet:
                solution: MySolution.sln
        </code>

        <p>If you project contains no solution files and multiple project files, you need to specify the exact file
            name of a project. For example, for the <code>MyProject.csproj</code> project file it can be:</p>

        <code style="block" lang="shell">
            --property=qodana.net.project=MyProject.csproj
        </code>

        <p>Alternatively, you can specify the project file name in the <a href="qodana-yaml.md"><code>qodana.yaml</code></a>
            file using the <code>project</code> option:</p>

        <code style="block" lang="yaml">
            dotnet:
                project: MyProject.csproj
        </code>

        <chapter id="docker-dotnet-specific-solution-project-configure-solution" title="Configure a solution">

            <p>A solution configuration defines which projects in the solution are build, and which project
                configurations are used for specific projects within the solution.</p>

            <p>Each newly-created solution includes the <code>Debug</code> and <code>Release</code>
                configurations, which can be complemented by your custom configurations.</p>

            <p>You can switch configurations of the current solution using the <code>--property</code>
                configuration option. For example, use this to switch to the <code>Release</code>
                configuration:</p>

            <code style="block" lang="shell">
                --property=qodana.net.configuration=Release
            </code>

            <p>Alternatively, you can specify the configuration in <code>qodana.yaml</code>:</p>

            <code style="block" lang="yaml">
                dotnet:
                  configuration: Release
            </code>

            <p>By default, the solution platform is set to <code>Any CPU</code>.You can override this using the
                <code>--property</code> option:</p>

            <code style="block" lang="shell">
                --property=qodana.net.platform=x86
            </code>

            <p>Alternatively, you can specify the platform in <code>qodana.yaml</code>:</p>

            <code style="block" lang="yaml">
                dotnet:
                  platform: x86
            </code>

        </chapter>

    </chunk>

    <chunk id="docker-dotnet-specific-requirements">
        <p>%linter% is suitable for analyzing .NET Core projects and provides the following SDK versions:</p>

        <list>
            <li>3.0.103</li>
            <li>6.0.405</li>
            <li>7.0.102</li>
        </list>

        <p>All SDK versions are stored in the <code>/usr/share/dotnet/sdk</code> directory of the %linter% container filesystem.</p>

        <note>Functionality of .NET Framework-based project analysis will be added in future versions of the linter. Currently,
        it is not recommended to inspect projects that require .NET Framework.</note>

        <p>In case a project requires a different version of the SDK, you can set it up before running the analysis using the
            <a href="before-running-qodana.md"><code>bootstrap</code></a> field in the <code>qodana.yaml</code> file.
            For example, this command will install the required version of the SDK that is specified in the
            <code>global.json</code> file and located in the root of your project:</p>

        <code style="block" lang="yaml">
            bootstrap: curl -fsSL https://dot.net/v1/dotnet-install.sh |
              bash -s -- --jsonfile /data/project/global.json -i /usr/share/dotnet
        </code>

        <p filter="dotnet-techs">Using this command, you can install the 7.0.100-rc.1 version of the SDK:</p>

        <code style="block" lang="yaml" filter="dotnet-techs">
            bootstrap: curl -fsSL https://dot.net/v1/dotnet-install.sh |
              bash -s -- --version 7.0.100-rc.1.22431.12 -i /usr/share/dotnet
        </code>

    </chunk>

    <chunk id="configure-jdk-qodana-yaml">

        <p filter="configure-jdk">In the <a href="qodana-yaml.md"><code style="inline">qodana.yaml</code></a> file, you
            can specify the JDK version using the <code style="inline">projectJDK</code> option, for example: </p>

        <p filter="configure-jdk-qodana-yaml">Use the <code style="inline">projectJDK</code> option to specify
            the JDK version, for example: </p>

        <code style="block" lang="yaml">
            projectJDK: 11
        </code>

        <p>or:</p>

        <code style="block" lang="yaml">
            projectJDK: 1.8
        </code>

        <p>You can also specify JDK using the name:</p>

        <code style="block" lang="yaml">
            projectJDK: corretto-19
        </code>


    </chunk>

    <chunk id="inspection-profiles-profile-name">

    <p>The <code>--profile-name</code> CLI option lets you run %product% using either the
        <a href="inspection-profiles.md" anchor="Default+profiles">default profiles</a> or the profile name from the
        <a href="inspection-profiles.md" anchor="Custom+profiles">custom profile</a>.
    </p>

    <p>
        This command lets you override the default profile und run %product% using the
        <a href="inspection-profiles.md" anchor="Default+profiles"><code>qodana.recommended</code></a> profile:
    </p>

    <tabs group="cli-settings">
        <tab title="Docker image" group-key="docker-image">
            <code style="block" lang="shell" prompt="$">
                docker run \
                -v $(pwd):/data/project/ \
                jetbrains/qodana-&lt;linter&gt; \
                --profile-name qodana.recommended
            </code>
        </tab>
        <tab title="Qodana CLI" group-key="qodana-cli">
            <code style="block" lang="shell" prompt="$">
                qodana scan \
                -profile-name qodana.recommended
            </code>
        </tab>
    </tabs>

    <p>If you need to run %product% with a custom profile, you can use its actual profile name.
        This command lets you bind a custom profile:</p>

        <tabs group="cli-settings" filter="for-inspection-profiles">
            <tab title="Docker image" group-key="docker-image">
                <code style="block" lang="shell" prompt="$">
                    docker run \
                    -v $(pwd):/data/project/ \
                    -v &lt;path-to-profile-file&gt;/&lt;file-name&gt;:/data/project/.idea/inspectionProfiles/&lt;file-name&gt; \
                    jetbrains/qodana-&lt;linter&gt; \
                    --profile-name &lt;profile-name-from-file&gt;
                </code>
            </tab>
            <tab title="Qodana CLI" group-key="qodana-cli">
                <code style="block" lang="shell" prompt="$">
                    qodana scan \
                    -v &lt;path-to-profile-file&gt;/&lt;file-name&gt;:/data/project/.idea/inspectionProfiles/&lt;file-name&gt; \
                    --profile-name &lt;profile-name-from-file&gt;
                </code>
            </tab>
        </tabs>


    </chunk>

    <chunk id="inspection-profiles-profile-path">

        <p>The <code>--profile-path</code> CLI option lets you override the path to the file containing the profile.</p>

        <p>This command lets you bind the file to the profile directory,
            and the <code>--profile-path</code> option tells %product% which profile file to read:</p>

        <tabs group="cli-settings">
            <tab title="Docker image" group-key="docker-image">
                <code style="block" lang="shell" prompt="$">
                    docker run \
                    -v $(pwd):/data/project/ \
                    -v &lt;path-to-profile-file&gt;/&lt;file-name&gt;:/data/project/myprofiles/&lt;file-name&gt; \
                    jetbrains/qodana-&lt;linter&gt; \
                    --profile-path /data/project/myprofiles/&lt;file-name&gt;
                </code>
            </tab>
            <tab title="Qodana CLI" group-key="qodana-cli">
                <code style="block" lang="shell" prompt="$">
                    qodana scan \
                    -v &lt;path-to-profile-file&gt;/&lt;file-name&gt;:/data/project/myprofiles/&lt;file-name&gt; \
                    --profile-path /data/project/myprofiles/&lt;file-name&gt;
                </code>
            </tab>
        </tabs>

    </chunk>

    <chunk id="linters-supported-features">

        <p>The %linter% linter provides the following %product% features:</p>

        <list filter="php">
            <li><a href="baseline.xml"/></li>
            <li><a href="quality-gate.xml"/></li>
            <li><a href="php-language-upgrade.xml"/></li>
            <li><a href="license-audit.xml"/></li>
            <li><a href="vulnerability-checker.md"/></li>
            <li><a href="taint-analysis.md"/></li>
        </list>

        <list filter="jvm">
            <li><a href="baseline.xml"/></li>
            <li><a href="quality-gate.xml"/></li>
            <li><a href="license-audit.xml"/></li>
            <li><a href="vulnerability-checker.md"/></li>
        </list>

        <list filter="non-jvm">
            <li><a href="baseline.xml"/></li>
            <li><a href="quality-gate.xml"/></li>
            <li><a href="license-audit.xml"/></li>
        </list>

        <list filter="dotnet">
            <li><a href="baseline.xml"/></li>
            <li><a href="quality-gate.xml"/></li>
        </list>


    </chunk>

    <chunk id="github-basic-configuration">

        <procedure>
            <step>On the <menupath>Settings</menupath> tab of the GitHub UI, create the <code>QODANA_TOKEN</code>
                <a href="https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository">encrypted secret</a>
                and save the <a href="cloud-projects.xml" anchor="cloud-manage-projects">project token</a> as its value.
            </step>
            <step>On the <menupath>Actions</menupath> tab of the GitHub UI, set up a new workflow and create the
                <code>.github/workflows/code_quality.yml</code> file.</step>
            <step>To inspect the <code>main</code> branch, release branches, and the pull requests coming
            to your repository, save this workflow configuration to the <code>.github/workflows/code_quality.yml</code> file:
                <code style="block" lang="yaml">
                    name: Qodana
                    on:
                      workflow_dispatch:
                      pull_request:
                      push:
                        branches:
                          - main
                          - 'releases/*'

                    jobs:
                      qodana:
                        runs-on: ubuntu-latest
                        permissions:
                          contents: write
                          pull-requests: write
                          checks: write
                        steps:
                          - uses: actions/checkout@v3
                            with:
                              ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
                              fetch-depth: 0  # a full history is required for pull request analysis
                          - name: 'Qodana Scan'
                            uses: JetBrains/qodana-action@v2023.2
                            env:
                              QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
                </code>
            </step>
        </procedure>
    </chunk>

</topic>
